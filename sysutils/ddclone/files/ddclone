#!/bin/csh -f

########################################################################
# Copyright (c) 2005, Jason W. Bacon, Medical College of Wisconsin
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# Neither the name of the Medical College of Wisconsin nor the names of
# its contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

alias pause 'echo "Press return to continue..."; $<'

# Enable \n, \t, etc.
set echo_style = both

echo 'This utility is best run in single user mode.  If this is not possible,'
echo 'at least make sure the system is quiescent.  Any changes that occur'
echo 'on the source drive during cloning may cause a corrupt target disk.'
pause

set source = ""
while ( $source == "" )
    echo '\nSelect your source disk.  Live filesystems are OK here.'
    echo -n 'Source device? (Example: ad0) '
    set source = "$<"
end
if ( `dirname $source` != '/dev' ) set source = "/dev/$source"
if ( ! -c $source ) then
    echo "$source is not a device file."
    exit 1
endif

set dest = ""
while ( $dest == "" )
    echo '\nSelect your destination disk.  No part of this disk may be mounted.'
    echo -n 'Destination device? (Example: ad1, da0) '
    set dest = "$<"
end
if ( `dirname $dest` != '/dev' ) set dest = "/dev/$dest"
if ( ! -c $dest ) then
    echo "$dest is not a device file."
    exit 1
endif

# Don't let user overwrite an active disk!
if ( `df | fgrep $dest` != "" ) then
    echo "ERROR: A slice of $dest is currently mounted."
    exit 1
endif

###################################################################
# See if disks are the same size.  If so, cloning can be done with
# a single bit-copy command.

set source_sectors = `fdisk -s $source | awk 'NF == 7 { print $2 * $4 * $6 }'`
set dest_sectors = `fdisk -s $dest | awk 'NF == 7 { print $2 * $4 * $6 }'`
echo "Source sectors = $source_sectors  Dest sectors = $dest_sectors"

set source_ss = `fdisk $source | awk 'NF == 5 && $1 == "Media" { print $5 }'`
set dest_ss = `fdisk $dest | awk 'NF == 5 && $1 == "Media" { print $5 }'`
echo "Source sector size = $source_ss  Dest sector size = $dest_ss"

# Numbers too big for shell arithmetic - pipe through bc
set source_size = `echo "$source_sectors * $source_ss" | bc`
set dest_size = `echo "$dest_sectors * $dest_ss" | bc`

#set source_size = `diskinfo $source | awk ' { print $3 }'`
#set dest_size = `diskinfo $dest | awk ' { print $3 }'`

echo "\nSource disk size = $source_size bytes"
echo "Destination disk size = $dest_size bytes"

if ( "$source_size" == "$dest_size" ) then
    echo "\nDisks are the same size.  Would you like to clone the entire disk? (y/n) "
    set entire_disk = $<
    if ( $entire_disk == 'y' ) then
	echo "\nThis will destroy the entire contents of $dest, including"
	echo "any other operating systems that may be installed on it."
	echo -n "\nAre you absolutely sure you want to do this? (y/n) "
	set entire_disk = $<
    endif
else
    set entire_disk = 'n'
endif

if ( $entire_disk == 'y' ) then
    # Bit-copy entire disk
    time dd if=$source of=$dest bs=1m
else
    echo "\nDisks are different sizes.  Cloning individual partitions..."
    
    # Ask user to select slice containing the FreeBSD system to clone.
    fdisk -s $source
    echo -n "\nWhich slice on the source $source would you like to clone? [default = 1] "
    set sslice = s$<
    if ( $sslice == "s" ) set sslice = 's1'
    
    # FreeBSD boot manager
    echo -n '\nInstall FreeBSD boot manager? (y/n) '
    if ( $< == 'y' ) then
	set bn = 0
	while ( -e mbr.bak$bn )
	    @ bn++
	end
	echo "Old MBR saved as mbr.bak$bn."
	boot0cfg -Bv -f mbr.bak$bn -o packet -m 3 $dest
    endif
    
    # Optionally write every block on the disk to check for errors.
    echo -n "\nZero the destination disk $dest to test for bad blocks? (y/n) "
    if ( $< == 'y' ) dd if=/dev/zero of=$dest bs=1m
    
    # Optionally allow user to quickly initialize the whole disk for FreeBSD
    echo -n "\nUse whole destination disk $dest for FreeBSD? (y/n) "
    if ( $< == 'y' ) then
	echo "\nThis will destroy the entire contents of $dest, including"
	echo "any other operating systems that may be installed on it."
	echo -n "\nAre you absolutely sure you want to do this? (y/n) "
	if ( $< == 'y' ) fdisk -I $dest
	set dslice = 's1'
    else
	fdisk -s $dest
	echo -n "\nWhich slice on destination disk $dest will receive the FreeBSD system? "
	set dslice = s$<
    endif

    # Show user what they're about to overwrite
    echo "\nThe following label on the destination slice ${dest}${dslice} will be overwritten:"
    bsdlabel ${dest}${dslice}
    pause
    
    # Generate a flexible label to set up the new disk without knowing
    # it's size.
    echo "\nGenerating size-independent disk label from ${source}${sslice}:\n"
    set slices = `bsdlabel ${source}${sslice} | awk '$4 == "4.2BSD" { print $1 }'`
    set last_slice = $slices[$#slices]
    bsdlabel ${source}${sslice} | \
	awk -v last=$last_slice \
	'  { if ( $1 == "c:" || $1 == last ) printf("%4s        * %8s %9s %8s %5s %5s\n",$1,$3,$4,$5,$6,$7); else print $0 }' \
	> temp.bsdlabel
    pause
    vi temp.bsdlabel
    
    echo -n "Install the new label on the destination disk ${dest}${dslice}? (y/n) "
    if ( $< == 'y' ) then
	echo "New label installed on ${dest}${dslice}..."
	bsdlabel -R ${dest}${dslice} temp.bsdlabel
	bsdlabel ${dest}${dslice}
	pause
    else
	exit
    endif
    
    # Clone each partition individually
    foreach slice ($slices)
	echo "\nCloning slice $slice..."
	set part = `echo $slice | cut -c 1-1`
	set source_size = `bsdlabel ${source}${sslice} | awk -v tag=$slice '$1 == tag { print $2 }'`
	set dest_size = `bsdlabel ${dest}${dslice} | awk -v tag=$slice '$1 == tag { print $2 }'`
	echo "\nSize of ${source}${sslice}${part} = $source_size"
	echo "Size of ${dest}${dslice}${part} = $dest_size"

	# If slices are the same size, we can use dd (and run fsck on the
	# destination in case the source is mounted, and hence marked dirty).
	if ( $source_size == $dest_size ) then
	    echo "\nSlices are the same size.  Using dd..."
	    set echo
	    time dd if=${source}${sslice}${part} of=${dest}${dslice}${part} bs=1m
	    
	    # dd overwrites disk label, so restore it.
	    bsdlabel -R ${dest}${dslice} temp.bsdlabel
	    
	    # Check new filesystem and mark clean so it can be mounted.
	    fsck -y ${dest}${dslice}${part}
	    unset echo
	    mount ${dest}${dslice}${part} /mnt
	    if ( $status != 0 ) exit 1
	    df
	    umount /mnt
	else
	    # Copy file by file...
	    echo "\nSlices are different sizes, using cp..."
	    set source_dir = `df | awk -v dev=${source}${sslice}${part} '$1 == dev { print $6 }'`
	    set source_size = `df -b | awk -v dev=${source}${sslice}${part} '$1 == dev { print $3 }'`
	    if ( $source_size < $dest_size ) then
		set echo
		newfs ${dest}${dslice}${part}
		fsck -y ${dest}${dslice}${part}
		mount ${dest}${dslice}${part} /mnt
		set start_dir = `pwd`
		cd /mnt
		time dump -L -C 8 -f - $source_dir | \
			restore -r -f -
		unset echo
		cd $start_dir
		df
		ls /mnt
		umount /mnt
	    else
		echo "ERROR: Destination partition ${dest}${dslice}${part} is only $dest_size blocks."
		echo "Source partition ${source}${sslice}${part} contains $source_size blocks of data."
		exit 1
	    endif
	endif
    end
endif

if ( ${entire_disk} == 'y' ) then
    echo "Since the entire disk was just cloned, it is unclear which slice the"
    echo 'FreeBSD system resides on.'
    echo -n "Which slice on ${dest} contains the root filesystem? [default = 1] "
    set dslice = s$<
    if ( $dslice == 's' ) set dslice = 's1'
    set slices = `bsdlabel ${dest}${dslice} | awk '$4 == "4.2BSD" { print $1 }'`
    foreach slice ($slices)
	echo "\nChecking slice $slice..."
	set part = `echo $slice | cut -c 1-1`
	fsck -y ${dest}${dslice}${part}
    end
endif
mount ${dest}${dslice}a /mnt

# Edit rc.conf on dest and set IP
echo -n "Set IP address? (y/n) "
if ( $< == 'y' ) vi /mnt/etc/rc.conf

# Edit fstab on dest
echo "If $dest contains a bootable FreeBSD system, you must ensure that"
echo "the device names in /etc/fstab are correct.  Note that the device number"
echo "may be different than it is here while being cloned, e.g. ad1 on this"
echo "system may be ad0 when it is actually used as a boot disk."
pause
if ( -e ./fstab ) then
    mv /mnt/etc/fstab /mnt/etc/fstab.clone
    cp -fp ./fstab /mnt/etc/fstab
endif
vi /mnt/etc/fstab

# Turn off xdm until Xorg is configured
echo "If xdm is enabled, you'll want to disable it until X11 is configured"
echo "on the new hardware."
pause
vi /mnt/etc/ttys

# Remove ssh keys from target disk.  These should not be duplicated!
echo 'Removing ssh keys.  These will be regenerated upon the first boot.'
rm -f /mnt/etc/ssh/ssh_host_*

umount /mnt

