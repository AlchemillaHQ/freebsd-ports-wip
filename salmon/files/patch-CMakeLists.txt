--- CMakeLists.txt.orig	2021-11-23 02:42:29 UTC
+++ CMakeLists.txt
@@ -310,14 +310,15 @@ endif()
 #  Grab pufferfish source --- DURING CONFIGURE TIME!
 #
 ####
-if(NOT FETCHED_PUFFERFISH)
+# Fetched using GH_TUPLE
+# if(NOT FETCHED_PUFFERFISH)
   exec_program(${CMAKE_CURRENT_SOURCE_DIR}/scripts/fetchPufferfish.sh RETURN_VALUE FETCH_PF_SCRIPT_RET)
   message(STATUS "fetch PUFFERFISH exit code ${FETCH_PF_SCRIPT_RET}")
   if(NOT (FETCH_PF_SCRIPT_RET EQUAL 0))
     message(FATAL_ERROR "Could not fetch pufferfish source [fetchPufferfish.sh returned exit code ${FETCH_PF_SCRIPT_RET}].")
   endif()
   set(FETCHED_PUFFERFISH TRUE CACHE BOOL "Has pufferfish been fetched?" FORCE)
-endif()
+# endif()
 
 ##
 # Super-secret override
@@ -364,7 +365,10 @@ if(NOT Iconv_IS_BUILT_IN)
   set(ICONV_LIB Iconv::Iconv)
 endif()
 
-find_package(LibLZMA)
+# lzma is part of FreeBSD base
+# find_package(LibLZMA)
+set(LIBLZMA_FOUND TRUE)
+set(LIBLZMA_LIBRARIES /usr/lib/liblzma.a /usr/lib/libmd.a)
 if(NOT LIBLZMA_FOUND)
   message("Will attempt to fetch and build liblzma")
   message("=======================================")
@@ -610,7 +614,8 @@ if (NOT CEREAL_FOUND)
 endif()
 
 ## Try and find TBB first
-find_package(TBB 2019.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy)
+# tbbmalloc_proxy is rolled into tbbmalloc
+find_package(TBB 2019.0 COMPONENTS tbb tbbmalloc)
 
 ## NOTE: we actually require at least 2019 U4 or greater
 ## since we are using tbb::global_control.  However, they 
@@ -666,7 +671,7 @@ externalproject_add(libtbb
   INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
   PATCH_COMMAND "${TBB_PATCH_STEP}"
   CONFIGURE_COMMAND ""
-  BUILD_COMMAND make ${QUIET_MAKE} CXXFLAGS=${TBB_CXXFLAGS} lambdas=1 compiler=${TBB_COMPILER} cfg=release tbb_build_prefix=LIBS
+  BUILD_COMMAND gmake ${QUIET_MAKE} CXXFLAGS=${TBB_CXXFLAGS} lambdas=1 compiler=${TBB_COMPILER} cfg=release tbb_build_prefix=LIBS
   INSTALL_COMMAND sh -c "mkdir -p ${TBB_INSTALL_DIR}/include && mkdir -p ${TBB_INSTALL_DIR}/lib && cp ${TBB_SOURCE_DIR}/build/LIBS_release/*.${SHARED_LIB_EXTENSION}* ${TBB_INSTALL_DIR}/lib && cp -r ${TBB_SOURCE_DIR}/include/* ${TBB_INSTALL_DIR}/include"
   BUILD_IN_SOURCE 1
 )
@@ -799,22 +804,16 @@ endif()
 if (NOT LIBSTADENIO_FOUND)
   message("Build system will compile Staden IOLib")
   message("==================================================================")
+  # libstadenio is downloaded using GH_TUPLE
   externalproject_add(libstadenio
-    DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external
-    DOWNLOAD_COMMAND curl -k -L https://github.com/COMBINE-lab/staden-io_lib/archive/v1.14.8.1.tar.gz -o staden-io_lib-v1.14.8.tar.gz &&
-      ${SHASUM} f6f30eefa478cfb708f3109a35fb6ffa0e24951d9d971985df2cef5919dd0bc3 staden-io_lib-v1.14.8.tar.gz &&
-      mkdir -p staden-io_lib-1.14.8 &&
-      tar -xzf staden-io_lib-v1.14.8.tar.gz --strip-components=1 -C staden-io_lib-1.14.8 &&
-      rm -fr staden-io_lib &&
-      mv -f staden-io_lib-1.14.8 staden-io_lib
     SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/staden-io_lib
     INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
     CONFIGURE_COMMAND ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR> LDFLAGS=${LIBSTADEN_LDFLAGS} CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}
-    BUILD_COMMAND make ${QUIET_MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CFLAGS+=${STADEN_INC} CFLAGS+=${STADEN_LIB} LDFLAGS+=${EXTRA_CMAKE_LIBRARY_FLAGS} CFLAGS+=${EXTRA_CMAKE_INCLUDE_FLAGS} CFLAGS+=${LZFLAG} CFLAGS+=${SCHAR_FLAG}
+    BUILD_COMMAND gmake ${QUIET_MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CFLAGS+=${STADEN_INC} CFLAGS+=${STADEN_LIB} LDFLAGS+=${EXTRA_CMAKE_LIBRARY_FLAGS} CFLAGS+=${EXTRA_CMAKE_INCLUDE_FLAGS} CFLAGS+=${LZFLAG} CFLAGS+=${SCHAR_FLAG}
 
 
     BUILD_IN_SOURCE 1
-    INSTALL_COMMAND make install
+    INSTALL_COMMAND gmake install
   )
   if(NOT LIBLZMA_FOUND)
   	ExternalProject_Add_StepDependencies(libstadenio build liblzma)
@@ -828,23 +827,9 @@ if (ASAN_BUILD)
   set(FAST_MALLOC_LIB "")
   set(HAVE_FAST_MALLOC TRUE)
 else()
-  set(FAST_MALLOC_LIB "")
-  set(HAVE_FAST_MALLOC FALSE)
-
-  # See if we have Jemalloc
-  find_package(Jemalloc)
-  if(Jemalloc_FOUND)
-    ##
-    # Don't be so stringent about the version yet
-    ##
-    #if (NOT (${JEMALLOC_VERSION} VERSION_LESS 5.2.1))
-      message("Found Jemalloc library --- using this memory allocator")
-      set(FAST_MALLOC_LIB ${JEMALLOC_LIBRARIES})
-      set(HAVE_FAST_MALLOC TRUE)
-    #else()
-    #  message("Fond Jemalloc version ${JEMALLOC_VERSION}, but require >= 5.2.1. Downloading newer version")
-    #endif()
-  endif()
+  # jemalloc is default on FreeBSD
+  set(FAST_MALLOC_LIB "/usr/lib/libc.so")
+  set(HAVE_FAST_MALLOC TRUE)
 endif()
 
 if(CONDA_BUILD)
