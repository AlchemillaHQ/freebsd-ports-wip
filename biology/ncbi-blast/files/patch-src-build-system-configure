--- src/build-system/configure.orig	2013-11-25 13:58:10.000000000 -0600
+++ src/build-system/configure	2014-05-30 10:34:09.000000000 -0500
@@ -848,7 +848,7 @@
   --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
   --libdir=DIR           object code libraries [EPREFIX/lib]
   --includedir=DIR       C header files [PREFIX/include]
-  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
+  --oldincludedir=DIR    C header files for non-gcc47 [/usr/include]
   --infodir=DIR          info documentation [PREFIX/info]
   --mandir=DIR           man documentation [PREFIX/man]
 _ACEOF
@@ -3481,8 +3481,8 @@
 ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
 ac_compiler_gnu=$ac_cv_c_compiler_gnu
 if test -n "$ac_tool_prefix"; then
-  # Extract the first word of "${ac_tool_prefix}gcc", so it can be a program name with args.
-set dummy ${ac_tool_prefix}gcc; ac_word=$2
+  # Extract the first word of "${ac_tool_prefix}gcc47", so it can be a program name with args.
+set dummy ${ac_tool_prefix}gcc47; ac_word=$2
 echo "$as_me:$LINENO: checking for $ac_word" >&5
 echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
 if test "${ac_cv_prog_CC+set}" = set; then
@@ -3498,7 +3498,7 @@
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
   if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_CC="${ac_tool_prefix}gcc"
+    ac_cv_prog_CC="${ac_tool_prefix}gcc47"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
   fi
@@ -3519,8 +3519,8 @@
 fi
 if test -z "$ac_cv_prog_CC"; then
   ac_ct_CC=$CC
-  # Extract the first word of "gcc", so it can be a program name with args.
-set dummy gcc; ac_word=$2
+  # Extract the first word of "gcc47", so it can be a program name with args.
+set dummy gcc47; ac_word=$2
 echo "$as_me:$LINENO: checking for $ac_word" >&5
 echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
 if test "${ac_cv_prog_ac_ct_CC+set}" = set; then
@@ -3536,7 +3536,7 @@
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
   if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_ac_ct_CC="gcc"
+    ac_cv_prog_ac_ct_CC="gcc47"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
   fi
@@ -4200,7 +4200,7 @@
   return 0;
 }
 _ACEOF
-# Don't try gcc -ansi; that turns off useful extensions and
+# Don't try gcc47 -ansi; that turns off useful extensions and
 # breaks some systems' header files.
 # AIX			-qlanglvl=ansi
 # Ultrix and OSF/1	-std1
@@ -4411,7 +4411,7 @@
 ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
 ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
 if test -n "$ac_tool_prefix"; then
-  for ac_prog in $CCC g++ c++ gpp aCC CC cxx cc++ cl FCC KCC RCC xlC_r xlC
+  for ac_prog in $CCC $CXX g++47 c++ gpp aCC CC cxx cc++ cl FCC KCC RCC xlC_r xlC
   do
     # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
 set dummy $ac_tool_prefix$ac_prog; ac_word=$2
@@ -4453,7 +4453,7 @@
 fi
 if test -z "$CXX"; then
   ac_ct_CXX=$CXX
-  for ac_prog in $CCC g++ c++ gpp aCC CC cxx cc++ cl FCC KCC RCC xlC_r xlC
+  for ac_prog in $CCC $CXX g++47 c++ gpp aCC CC cxx cc++ cl FCC KCC RCC xlC_r xlC
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
 set dummy $ac_prog; ac_word=$2
@@ -4492,7 +4492,7 @@
 
   test -n "$ac_ct_CXX" && break
 done
-test -n "$ac_ct_CXX" || ac_ct_CXX="g++"
+test -n "$ac_ct_CXX" || ac_ct_CXX="g++47"
 
   CXX=$ac_ct_CXX
 fi
@@ -4771,7 +4771,7 @@
       test -n "$real_dir" && test -x "$real_dir/$real_CXX" && \
         real_CXX="$real_dir/$real_CXX"
       case "$real_CXX" in
-          *gcc* ) LIBS="$LIBS -lstdc++"
+          *gcc47* ) LIBS="$LIBS -lstdc++"
       esac
       ;;
    *)
@@ -5109,7 +5109,7 @@
 echo "$as_me: error: Do not know how to build MT-safe with compiler $CXX $compiler_ver" >&2;}
    { (exit 1); exit 1; }; } ;;
    esac
-   CPPFLAGS="$CPPFLAGS -D_MT -D_REENTRANT -D_THREAD_SAFE"
+   CPPFLAGS="$CPPFLAGS -D_MT -D_REENTRANT -D_THREAD_SAFE -D__RUNETYPE_INTERNAL"
    case "$host_os:$compiler" in
      solaris2.10:GCC ) : ${THREAD_LIBS:="-lposix4"} ;;
      solaris*        ) : ${THREAD_LIBS:="-lpthread -lposix4"} ;;
@@ -6199,7 +6199,7 @@
         *       ) major=6 ;;
     esac
     found=false
-    for f in libstdc++.so.$major libgcc_s.so.1 libstdc++.a; do
+    for f in libstdc++.so.$major libgcc47_s.so.1 libstdc++.a; do
         path=`$CXX $LDFLAGS -print-file-name=$f`
         dir=`dirname "$path"`
         abs_dir=`cd "$dir" && pwd`
@@ -6376,11 +6376,11 @@
    # flag=-fno-merge-debug-strs
    # CFLAGS="$flag $CFLAGS"
    # CXXFLAGS="$flag $CXXFLAGS"
-   # AC_CACHE_CHECK([whether GCC supports $flag], ncbi_cv_prog_gcc_nomerge,
+   # AC_CACHE_CHECK([whether GCC supports $flag], ncbi_cv_prog_gcc47_nomerge,
    #    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[return 0;]])],
-   #                       ncbi_cv_prog_gcc_nomerge=yes,
-   #                       ncbi_cv_prog_gcc_nomerge=no)])
-   # if test "$ncbi_cv_prog_gcc_nomerge" = no; then
+   #                       ncbi_cv_prog_gcc47_nomerge=yes,
+   #                       ncbi_cv_prog_gcc47_nomerge=no)])
+   # if test "$ncbi_cv_prog_gcc47_nomerge" = no; then
    #    CFLAGS=$orig_CFLAGS
    #    CXXFLAGS=$orig_CXXFLAGS
    # fi
@@ -6400,16 +6400,16 @@
 
 #### Intel compiler::  common flags and definitions
 if test "$compiler" = "ICC" ; then
-   if test -d /usr/local/gcc; then
+   if test -d /usr/local/gcc47; then
       case "$compiler_version:$HOST_CPU" in
          *:i?86)               v=4.4.5 ;;
          ???:* | 1[01]??:* ) v=4.0.1 ;;
          *)                    v=4.4.2 ;;
       esac
-      gcc=/usr/local/gcc/$v/bin/gcc
-      if test -x $gcc; then
-         CC="$CC -gcc-name=$gcc"
-         CXX="$CXX -gcc-name=$gcc"
+      gcc47=/usr/local/gcc47/$v/bin/gcc47
+      if test -x $gcc47; then
+         CC="$CC -gcc47-name=$gcc47"
+         CXX="$CXX -gcc47-name=$gcc47"
       fi
    fi
    if test -n "$icc_license" ; then
@@ -7384,7 +7384,7 @@
       ac_preproc_ok=false
 for ac_cxx_preproc_warn_flag in '' yes
 do
-  # Use a header file that comes with gcc, so configuring glibc
+  # Use a header file that comes with gcc47, so configuring glibc
   # with a fresh cross-compiler works.
   # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
   # <limits.h> exists even on freestanding compilers.
@@ -7491,7 +7491,7 @@
 ac_preproc_ok=false
 for ac_cxx_preproc_warn_flag in '' yes
 do
-  # Use a header file that comes with gcc, so configuring glibc
+  # Use a header file that comes with gcc47, so configuring glibc
   # with a fresh cross-compiler works.
   # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
   # <limits.h> exists even on freestanding compilers.
@@ -8841,7 +8841,7 @@
       ac_preproc_ok=false
 for ac_c_preproc_warn_flag in '' yes
 do
-  # Use a header file that comes with gcc, so configuring glibc
+  # Use a header file that comes with gcc47, so configuring glibc
   # with a fresh cross-compiler works.
   # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
   # <limits.h> exists even on freestanding compilers.
@@ -8948,7 +8948,7 @@
 ac_preproc_ok=false
 for ac_c_preproc_warn_flag in '' yes
 do
-  # Use a header file that comes with gcc, so configuring glibc
+  # Use a header file that comes with gcc47, so configuring glibc
   # with a fresh cross-compiler works.
   # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
   # <limits.h> exists even on freestanding compilers.
@@ -11732,12 +11732,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -11972,12 +11972,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -12067,12 +12067,12 @@
 
 #undef _doprnt
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char _doprnt ();
 /* The GNU C library defines this for functions which it implements
@@ -12211,12 +12211,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -12592,12 +12592,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -19377,11 +19377,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char gethostbyname ();
 int
@@ -19447,11 +19447,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char connect ();
 int
@@ -19602,12 +19602,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -19832,12 +19832,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -19944,12 +19944,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -20030,11 +20030,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char kstat_open ();
 int
@@ -20085,11 +20085,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char kstat_open ();
 int
@@ -20164,11 +20164,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char rstat ();
 int
@@ -20219,11 +20219,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char rstat ();
 int
@@ -20306,11 +20306,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char setkey ();
 int
@@ -20361,11 +20361,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char setkey ();
 int
@@ -20450,11 +20450,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char dlopen ();
 int
@@ -20505,11 +20505,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char dlopen ();
 int
@@ -20588,11 +20588,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char uuid_generate ();
 int
@@ -20643,11 +20643,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char uuid_generate ();
 int
@@ -20717,11 +20717,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char fuse_loop ();
 int
@@ -20772,11 +20772,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char fuse_loop ();
 int
@@ -20852,11 +20852,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char clock_gettime ();
 int
@@ -20907,11 +20907,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char clock_gettime ();
 int
@@ -20988,11 +20988,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char cplus_demangle ();
 int
@@ -21043,11 +21043,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char cplus_demangle ();
 int
@@ -21146,12 +21146,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -24452,12 +24452,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -25867,8 +25867,8 @@
    case "$with_boost_tag" in
       yes | "" )
          case "$host_os:$ncbi_compiler" in
-            darwin*:GCC) BOOST_TAG="-xgcc" ;;
-            *:GCC)       BOOST_TAG="-gcc" ;;
+            darwin*:GCC) BOOST_TAG="-xgcc47" ;;
+            *:GCC)       BOOST_TAG="-gcc47" ;;
             *:KCC)       BOOST_TAG="-kcc" ;;
             linux*:ICC)  BOOST_TAG="-il"  ;;
             *:WORKSHOP)  BOOST_TAG="-sw"  ;;
@@ -25878,7 +25878,7 @@
             *:MSVC)      BOOST_TAG="-vc"  ;;
          esac
          case "$BOOST_TAG" in
-            -*gcc|-il ) boost_comp_vers=`echo $compiler_version | cut -c1-2` ;;
+            -*gcc47|-il ) boost_comp_vers=`echo $compiler_version | cut -c1-2` ;;
             *         ) boost_comp_vers='' ;;
          esac
          test "$with_mt"    = "yes"  &&  BOOST_MT=-mt
@@ -26606,7 +26606,7 @@
     done
     # Screen out bogus values from the imake configuration.  They are
     # bogus both because they are the default anyway, and because
-    # using them would break gcc on systems where it needs fixed includes.
+    # using them would break gcc47 on systems where it needs fixed includes.
     case $ac_im_incroot in
 	/usr/include) ;;
 	*) test -f "$ac_im_incroot/X11/Xos.h" && ac_x_includes=$ac_im_incroot;;
@@ -26949,11 +26949,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char XOpenDisplay ();
 int
@@ -27005,11 +27005,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char dnet_ntoa ();
 int
@@ -27074,11 +27074,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char dnet_ntoa ();
 int
@@ -27170,12 +27170,12 @@
 
 #undef gethostbyname
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char gethostbyname ();
 /* The GNU C library defines this for functions which it implements
@@ -27248,11 +27248,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char gethostbyname ();
 int
@@ -27317,11 +27317,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char gethostbyname ();
 int
@@ -27409,12 +27409,12 @@
 
 #undef connect
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char connect ();
 /* The GNU C library defines this for functions which it implements
@@ -27487,11 +27487,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char connect ();
 int
@@ -27572,12 +27572,12 @@
 
 #undef remove
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char remove ();
 /* The GNU C library defines this for functions which it implements
@@ -27650,11 +27650,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char remove ();
 int
@@ -27735,12 +27735,12 @@
 
 #undef shmat
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char shmat ();
 /* The GNU C library defines this for functions which it implements
@@ -27813,11 +27813,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char shmat ();
 int
@@ -27893,11 +27893,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char IceConnectionNumber ();
 int
@@ -27967,11 +27967,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char XextCreateExtension ();
 int
@@ -28037,11 +28037,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char XtMainLoop ();
 int
@@ -28107,11 +28107,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char XmuMakeAtom ();
 int
@@ -28391,11 +28391,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char OSMesaCreateContext ();
 int
@@ -28507,11 +28507,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char glutInit ();
 int
@@ -28659,11 +28659,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char glewGetExtension ();
 int
@@ -28714,11 +28714,11 @@
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char glewGetExtension ();
 int
@@ -29320,12 +29320,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
@@ -31923,12 +31923,12 @@
 
 #undef $ac_func
 
-/* Override any gcc2 internal prototype to avoid an error.  */
+/* Override any gcc472 internal prototype to avoid an error.  */
 #ifdef __cplusplus
 extern "C"
 {
 #endif
-/* We use char because int might match the return type of a gcc2
+/* We use char because int might match the return type of a gcc472
    builtin and then its argument prototype would still apply.  */
 char $ac_func ();
 /* The GNU C library defines this for functions which it implements
